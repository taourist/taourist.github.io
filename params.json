{"name":"Taourist Blog - GitHub.io","tagline":"人生如逆旅 我亦是行人","body":"Recently I met a problem when using Shiro framework. Apache Shiro is known as a  powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. Since it relieved us of security issues, I deployed it for user management in our project.\r\nI spent some time to make it work, including user authentication, realm authorization and so on. After all is done, a problem occurred. It happened when logged in user is logged out due to session time out, The user is not redirected to the login page correctly when session is out, instead the whole page flashes. I must refresh the page manually in order to make the redirection work. It confused me since I had never set the configuration about the session out mechanism. The only thing I did is setting the session-timeout parameter in web.xml.\r\nThen I had to search how this engine works. Soon I found the redirection is implemented by the filter of Shiro, Shiro will create some default filters instances when running web-app. And the configuration code of filter lies in Spring application.xml:\r\n\t\r\n\t <bean id=\"shiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\r\n        <property name=\"filterChainDefinitions\">\r\n            <value>\r\n                /js/** = anon\r\n                /css/** = anon\r\n                /login = anon\r\n                /** = authc\r\n            </value>\r\n        </property>\r\n    </bean>\r\n\r\nHere, authc means *FormAuthenticationFilter* class in Shiro. Thus the log out operation is implemented in onAccessDenied method, then I wonder why it does not work for my situation. I searched Google again, and realized that is is due to AJAX request! Because all the requests in our project is AJAX request, the redirection thus can not be implemented by the server side. An alternative solution is add a sign in http response header, then the front page can receive the sign, and perform the redirection. Since the solution is clear, I created a new class named xxFilter, inherited from FormAuthenticationFilter, overrode onAccessDenied method, and added an operation for AJAX request. The code fragment is as follows.\r\n\r\n\t if (WebUtils.isAjax((HttpServletRequest) request)) {\r\n        logger.debug(\"This is ajax request, no redirection, but add header.\");\r\n        WebUtils.toHttp(response).addHeader(\"sessionStatus\", \"timeout\");\r\n\r\n    } else {\r\n        logger.debug(\"Just perform the normal redirection.\");\r\n        saveRequestAndRedirectToLogin(request, response);\r\n    }\r\n\r\nThen I tried to replace the authc filter with this new filter in application.xml, and it worked!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}